/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         steadyState;
}


gradSchemes
{

/* 

4 options to choose from, from least to most diffusive:
	cellMDLimited
	cellLimited
	faceMDLimited
	faceLimited
*/



    default         cellMDLimited Gauss linear 0.0; //or leastSquares; which is more accurate but can be oscillatory on tetrahedral meshes
    grad(U)         cellMDLimited Gauss linear 0.5; //between 0 and 1, 0 is most accurate but least stable
    
}

divSchemes
{

/* Robust numerical scheme but too diffusive

    div(phi,U)      Gauss upwind;
    div(phi,k)      Gauss upwind;
    div(phi,omega)  Gauss upwind;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    

   Accurate and stable numerical scheme (second order accurate)

    div(phi,U)      Gauss linearUpwind grad(U);
    div(phi,k)      Gauss linearUpwind grad(omega);
    div(phi,omega)  Gauss linearUpwind grad(omega);
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    

   Even more accurate but oscillatory scheme (second order accurate)

    div(phi,U)      Gauss linear
    div(phi,k)      Gauss limitedLinear 1;
    div(phi,omega)  Gauss limitedLinear 1;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    
*/

    default          none;
    div(phi,U)       bounded Gauss limitedLinear 1.0;
    div(phi,k)       bounded Gauss upwind;
    div(phi,omega)   bounded Gauss upwind;
    div(phi,epsilon) bounded Gauss upwind;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    
}

laplacianSchemes
{
    default         Gauss linear limited 0.75; //Slides between 0 and 1, 0 is for bad meshes and 1 is for good meshes
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         limited 0.75; //Takes whatever is used in the laplacianSchemes
}

wallDist
{
    method meshWave;
}


// ************************************************************************* //
